"""
Shell file generator for shtick
"""

import os
from pathlib import Path
from typing import Dict, List
from shtick.config import GroupData, Config
from shtick.shells import get_supported_shells, get_shell_syntax


class Generator:
    """Generates shell configuration files from parsed data"""

    def __init__(self, output_base_dir: str = None):
        self.output_base_dir = output_base_dir or Config.get_output_dir()

    def ensure_output_dir(self, group_name: str, item_type: str) -> str:
        """Ensure output directory exists and return the path"""
        output_dir = os.path.join(self.output_base_dir, group_name, item_type)
        Path(output_dir).mkdir(parents=True, exist_ok=True)
        return output_dir

    def generate_for_group(self, group: GroupData) -> None:
        """Generate all shell files for a single group"""
        print(f"Processing group: {group.name}")

        # Generate aliases
        if group.aliases:
            print(f"  Generating alias files ({len(group.aliases)} aliases)")
            self._generate_files(group.name, "alias", group.aliases, "aliases")

        # Generate env vars
        if group.env_vars:
            print(f"  Generating env var files ({len(group.env_vars)} variables)")
            self._generate_files(group.name, "env", group.env_vars, "envvars")

        # Generate functions
        if group.functions:
            print(f"  Generating function files ({len(group.functions)} functions)")
            self._generate_files(group.name, "function", group.functions, "functions")

    def _generate_files(
        self, group_name: str, item_type: str, items: Dict[str, str], prefix: str
    ) -> None:
        """Generate shell files for a specific item type"""
        output_dir = self.ensure_output_dir(group_name, item_type)

        # Generate for each supported shell + default
        all_shells = get_supported_shells() + ["default"]

        for shell_name in all_shells:
            shell_syntax = get_shell_syntax(shell_name)
            filename = f"{prefix}.{shell_name}"
            filepath = os.path.join(output_dir, filename)

            with open(filepath, "w") as f:
                # Write header
                f.write(f"# {prefix} for {shell_name}\n")
                f.write("# Generated by shtick\n\n")

                # Write items using appropriate syntax
                for key, value in items.items():
                    if item_type == "alias":
                        line = shell_syntax.alias_fmt.format(key, value)
                    elif item_type == "env":
                        line = shell_syntax.env_fmt.format(key, value)
                    elif item_type == "function":
                        line = shell_syntax.function_fmt.format(key, value)
                    else:
                        continue

                    f.write(line)

    def generate_all(self, config: Config) -> None:
        """Generate shell files for all groups in config"""
        if not config.groups:
            print("No groups found in configuration")
            return

        print(f"Generating shell files for {len(config.groups)} groups...")

        for group in config.groups:
            self.generate_for_group(group)

        print(f"All done! Files generated in {self.output_base_dir}")
        print("\nTo use these files, add lines like this to your shell config:")
        print("  # For bash/zsh:")
        print("  source ~/.config/shtick/GROUP_NAME/alias/aliases.bash")
        print("  source ~/.config/shtick/GROUP_NAME/env/envvars.bash")
        print("  source ~/.config/shtick/GROUP_NAME/function/functions.bash")
        print("\n  # For fish:")
        print("  source ~/.config/shtick/GROUP_NAME/alias/aliases.fish")
        print("  # etc...")

    def get_shell_files_for_group(self, group_name: str) -> Dict[str, List[str]]:
        """Get list of generated shell files for a group"""
        files = {"alias": [], "env": [], "function": []}

        for item_type in files.keys():
            type_dir = os.path.join(self.output_base_dir, group_name, item_type)
            if os.path.exists(type_dir):
                files[item_type] = [
                    os.path.join(type_dir, f)
                    for f in os.listdir(type_dir)
                    if os.path.isfile(os.path.join(type_dir, f))
                ]

        return files
